//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;

public class Orders : DBConnection
{
    public int      Order_Id         { get; private set; }
    public DateTime Order_Date       { get; private set; }
    public string   Employee         { get; private set; }
    public string   Shipping_Address { get; private set; }
    public string   Ship_City        { get; private set; }
    public string   Ship_State       { get; private set; }
    public int      Zip              { get; private set; }
    public double   Order_Total      { get; private set; }
    public double   Tax              { get; private set; }
    public string   Status           { get; private set; }
    public DateTime Closed_Date      { get; private set; }
    
    public Orders(DateTime Order_Date, string Employee, string Shipping_Address, string Ship_City, string Ship_State, int Zip, double Order_Total, double Tax, string Status, DateTime Closed_Date)
    {
        this.Order_Date       = Order_Date;
        this.Employee         = Employee;
        this.Shipping_Address = Shipping_Address;
        this.Ship_City        = Ship_City;
        this.Ship_State       = Ship_State;
        this.Zip              = Zip;
        this.Order_Total      = Order_Total;
        this.Tax              = Tax;
        this.Status           = Status;
        this.Closed_Date      = Closed_Date;
    }

    private Orders(int Order_Id, DateTime Order_Date, string Employee, string Shipping_Address, string Ship_City, string Ship_State, int Zip, double Order_Total, double Tax, string Status, DateTime Closed_Date)
    {
        this.Order_Id         = Order_Id;
        this.Order_Date       = Order_Date;
        this.Employee         = Employee;
        this.Shipping_Address = Shipping_Address;
        this.Ship_City        = Ship_City;
        this.Ship_State       = Ship_State;
        this.Zip              = Zip;
        this.Order_Total      = Order_Total;
        this.Tax              = Tax;
        this.Status           = Status;
        this.Closed_Date      = Closed_Date;
    }

    public void CompleteOrder()
    {
        this.Status = "Completed";
        
        foreach(OrderDetails item in OrderDetails.GetAllAt(this.Order_Id))
        {
            Inventory product = Inventory.GetWithCode(item.Product_Code);

            //Calculate the new value for the On hand quantity in inventory
            int newStockValue = product.On_Hand - item.Quantity;

            product.ModifyItemStock(newStockValue);
        }

        this.Save();
    }

    public void Save()
    {
        using (SqlConnection conn = new SqlConnection())
        {
            conn.ConnectionString = DBConnection.CONNECTION_STRING;
            conn.Open();

            string sql;

            if (Order_Id == -1)
            {
                sql = "INSERT INTO Orders(Order_Date, Employee, Shipping_Address, Ship_City, Ship_State, Zip, Order_Total, Tax, Status, Closed_Date) "
                    + "VALUES(@Order_Date, @Employee, @Shipping_Address, @Ship_City, @Ship_State, @Zip, @Order_Total, @Tax, @Status, @Closed_Date) "
                    + "SELECT CAST (scope_identity() as int)";
            }
            else
            {
                sql = "UPDATE Orders SET "
                    + "Order_Date = @Order_Date, Employee = @Employee, Shipping_Address = @Shipping_Address, Ship_City = @Ship_City, Ship_State = @Ship_State, Zip = @Zip, Order_Total = @Order_Total, Tax = @Tax, Status = @Status, Closed_Date = @Closed_Date "
                    + "WHERE Order_Id = @Order_Id";
            }

            SqlCommand command = new SqlCommand(sql, conn);

            command.Parameters.AddWithValue("Order_Date", Order_Date);
            command.Parameters.AddWithValue("Employee", Employee);
            command.Parameters.AddWithValue("Shipping_Address", Shipping_Address);
            command.Parameters.AddWithValue("Ship_City", Ship_City);
            command.Parameters.AddWithValue("Ship_State", Ship_State);
            command.Parameters.AddWithValue("Zip", Zip);
            command.Parameters.AddWithValue("Order_Total", Order_Total);
            command.Parameters.AddWithValue("Tax", Tax);
            command.Parameters.AddWithValue("Status", Status);
            command.Parameters.AddWithValue("Closed_Date", Closed_Date);

            
            if (Order_Id == -1)
            {
                Order_Id = (int)command.ExecuteScalar();
            }
            else
            {
                command.Parameters.AddWithValue("Order_Id", Order_Id);
                command.ExecuteNonQuery();
            }
        }
    }

    public static Orders Get(int Order_Id)
    {
        using (SqlConnection conn = new SqlConnection())
        {
            conn.ConnectionString = DBConnection.CONNECTION_STRING;
            conn.Open();

            string sql = "SELECT Order_Id, Order_Date, Employee, Shipping_Address, Ship_City, Ship_State, Zip, Order_Total, Tax, Status, Closed_Date "
                       + "FROM Orders "
                       + "WHERE Order_Id = @Order_Id";

            SqlCommand command = new SqlCommand(sql, conn);
            command.Parameters.AddWithValue("Order_Id", Order_Id);

            using (SqlDataReader reader = command.ExecuteReader())
            {
                if (reader.HasRows)
                {
                    reader.Read();

                    Orders order = new Orders(reader.GetInt32(0),
                                              reader.GetDateTime(1),
                                              reader.GetString(2),
                                              reader.GetString(3),
                                              reader.GetString(4),
                                              reader.GetString(5),
                                              reader.GetInt32(6),
                                              reader.GetDouble(7),
                                              reader.GetDouble(8),
                                              reader.GetString(9),
                                              reader.GetDateTime(10));
                    return order;
                }
                else
                {
                    return null;
                }
            }
        }
    }

    public static List<Orders> GetAll()
    {
        using (SqlConnection conn = new SqlConnection())
        {
            conn.ConnectionString = DBConnection.CONNECTION_STRING;
            conn.Open();

            string sql = "SELECT Order_Id, Order_Date, Employee, Shipping_Address, Ship_City, Ship_State, Zip, Order_Total, Tax, Status, Closed_Date "
                       + "FROM Orders ";

            SqlCommand command = new SqlCommand(sql, conn);
            using (SqlDataReader reader = command.ExecuteReader())
            {
                List<Orders> OrderList = new List<Orders>();

                while (reader.Read())
                {
                    Orders order = new Orders(reader.GetInt32(0),
                                              reader.GetDateTime(1),
                                              reader.GetString(2),
                                              reader.GetString(3),
                                              reader.GetString(4),
                                              reader.GetString(5),
                                              reader.GetInt32(6),
                                              reader.GetDouble(7),
                                              reader.GetDouble(8),
                                              reader.GetString(9),
                                              reader.GetDateTime(10));

                    OrderList.Add(order);
                }

                return OrderList;
            }
        }
    }

	public override string ToString()
	{
        return "Order #" + this.Order_Id + " :" + this.Status;
	}

}

