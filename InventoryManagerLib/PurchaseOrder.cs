//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;

public class PurchaseOrder : DBConnection
{
	public int      PurchaseOrders_Id   { get; private set; }
    public DateTime Order_Date          { get; private set; }
    public string   Created_By          { get; private set; }
    public DateTime Created_Date        { get; private set; }
    public double   Shipping_Fee        { get; private set; }
    public double   Tax                 { get; private set; }
    public DateTime Payment_Date        { get; private set; }
    public double   Payment_Amount      { get; private set; }
    public double   Order_Subtotal      { get; private set; }
    public double   Order_Total         { get; private set; }
    public DateTime Date_Received       { get; private set; }
    public string   Status              { get; private set; }


    public PurchaseOrder(DateTime Order_Date, string Created_By, DateTime Created_Date,double Shipping_Fee, double Tax, DateTime Payment_Date,double Payment_Amount, double Order_Subtotal, double Order_Total, DateTime Date_Received, string Status )
    {
        this.PurchaseOrders_Id = -1;
        this.Order_Date     = Order_Date;
        this.Created_By     = Created_By;
        this.Created_Date   = Created_Date;
        this.Shipping_Fee   = Shipping_Fee;
        this.Tax            = Tax;
        this.Payment_Date   = Payment_Date;
        this.Payment_Amount = Payment_Amount;
        this.Order_Subtotal = Order_Subtotal;
        this.Order_Total    = Order_Total;
        this.Date_Received  = Date_Received;
        this.Status         = Status;
    }

    private PurchaseOrder(int PurchaseOrders_Id, DateTime Order_Date, string Created_By, DateTime Created_Date, double Shipping_Fee, double Tax, DateTime Payment_Date, double Payment_Amount, double Order_Subtotal, double Order_Total, DateTime Date_Received, string Status)
    {
        this.PurchaseOrders_Id = PurchaseOrders_Id;
        this.Order_Date = Order_Date;
        this.Created_By = Created_By;
        this.Created_Date = Created_Date;
        this.Shipping_Fee = Shipping_Fee;
        this.Tax = Tax;
        this.Payment_Date = Payment_Date;
        this.Payment_Amount = Payment_Amount;
        this.Order_Subtotal = Order_Subtotal;
        this.Order_Total = Order_Total;
        this.Date_Received = Date_Received;
        this.Status = Status;
    }

    
    public void CompleteOrder()
    {
        this.Status = "Completed";

        //need to get all products in the purchaseorderdetails and add them to inventory
        foreach(PurchaseOrderDetails item in PurchaseOrderDetails.GetAllAt(this.PurchaseOrders_Id))
        {
            Inventory product = Inventory.GetWithName(item.Product);

            int newStockValue = product.On_Hand + item.Quantity;

            product.ModifyItemStock(newStockValue);
            product.UpdateOnOrderQuantity(product.On_Order - item.Quantity);
        }

        this.Save();
    }


    public void Save()
    {
        using (SqlConnection conn = new SqlConnection())
        {
            conn.ConnectionString = DBConnection.CONNECTION_STRING;
            conn.Open();

            string sql;

            if (PurchaseOrders_Id == -1)
            {
                sql = "INSERT INTO PurchaseOrders(Order_Date, Created_By, Created_Date, Shipping_Fee, Tax, Payment_Date, Payment_Amount, Order_Subtotal, Order_Total, Date_Received, Status) "
                    + "Values(@Order_Date, @Created_By, @Created_Date, @Shipping_Fee, @Tax, @Payment_Date, @Payment_Amount, @Order_Subtotal, @Order_Total, @Date_Received, @Status) "
                    + "SELECT CAST (scope_identity() as int)";
            }
            else
            {
                sql = "UPDATE PurchaseOrders SET "
                    + "Order_Date = @Order_Date, Created_By = @Created_By, Created_Date = @Created_Date, Shipping_Fee = @Shipping_Fee, Tax = @Tax, Payment_Date = @Payment_Date, Payment_Amount = @Payment_Amount, Order_Subtotal = @Order_Subtotal, Order_Total = @Order_Total, Date_Received = @Date_Received, Status = @Status "
                    + "WHERE PurchaseOrders_Id = @PurchaseOrders_Id ";
            }

            SqlCommand command = new SqlCommand(sql, conn);

            command.Parameters.AddWithValue("Order_Date", Order_Date);
            command.Parameters.AddWithValue("Created_By", Created_By);
            command.Parameters.AddWithValue("Created_Date", Created_Date);
            command.Parameters.AddWithValue("Shipping_Fee", Shipping_Fee);
            command.Parameters.AddWithValue("Tax", Tax);
            command.Parameters.AddWithValue("Payment_Date", Payment_Date);
            command.Parameters.AddWithValue("Payment_Amount", Payment_Amount);
            command.Parameters.AddWithValue("Order_Subtotal", Order_Subtotal);
            command.Parameters.AddWithValue("Order_Total", Order_Total);
            command.Parameters.AddWithValue("Date_Received", Date_Received);
            command.Parameters.AddWithValue("Status", Status);

            if (PurchaseOrders_Id == -1)
            {
                PurchaseOrders_Id = (int)command.ExecuteScalar();
            }
            else
            {
                command.Parameters.AddWithValue("PurchaseOrders_Id", PurchaseOrders_Id);
                command.ExecuteNonQuery();
            }
        }
    }

    public static PurchaseOrder Get(int PurchaseOrders_Id)
    {
        using (SqlConnection conn = new SqlConnection())
        {
            conn.ConnectionString = DBConnection.CONNECTION_STRING;
            conn.Open();

            string sql = "SELECT PurchaseOrders_Id, Order_Date, Created_By, Created_Date, Shipping_Fee, Tax, Payment_Date, Payment_Amount, Order_Subtotal, Order_Total, Date_Received, Status "
                       + "FROM PurchaseOrders "
                       + "WHERE PurchaseOrders_Id = @PurchaseOrders_Id";

            SqlCommand command = new SqlCommand(sql, conn);
            command.Parameters.AddWithValue("PurchaseOrders_Id", PurchaseOrders_Id);

            using (SqlDataReader reader = command.ExecuteReader())
            {
                if (reader.HasRows)
                {
                    reader.Read();

                    PurchaseOrder purchaseOrder = new PurchaseOrder(reader.GetInt32(0),
                                                                    reader.GetDateTime(1),
                                                                    reader.GetString(2),
                                                                    reader.GetDateTime(3),
                                                                    reader.GetDouble(4),
                                                                    reader.GetDouble(5),
                                                                    reader.GetDateTime(6),
                                                                    reader.GetDouble(7),
                                                                    reader.GetDouble(8),
                                                                    reader.GetDouble(9),
                                                                    reader.GetDateTime(11),
                                                                    reader.GetString(10));
                    return purchaseOrder;
                }
                else
                {
                    return null;
                }
            }
        }
    }

    public static List<PurchaseOrder> GetAll()
    {
        using (SqlConnection conn = new SqlConnection())
        {
            conn.ConnectionString = DBConnection.CONNECTION_STRING;
            conn.Open();

            string sql = "SELECT PurchaseOrders_Id, Order_Date, Created_By, Created_Date, Shipping_Fee, Tax, Payment_Date, Payment_Amount, Order_Subtotal, Order_Total, Status, Date_Received "
                       + "FROM PurchaseOrders ";

            SqlCommand command = new SqlCommand(sql, conn);
            using (SqlDataReader reader = command.ExecuteReader())
            {
                List<PurchaseOrder> PurchaseOrderList = new List<PurchaseOrder>();

                while (reader.Read())
                {
                    PurchaseOrder purchaseOrder = new PurchaseOrder(reader.GetInt32(0),
                                                                    reader.GetDateTime(1),
                                                                    reader.GetString(2),
                                                                    reader.GetDateTime(3),
                                                                    reader.GetDouble(4),
                                                                    reader.GetDouble(5),
                                                                    reader.GetDateTime(6),
                                                                    reader.GetDouble(7),
                                                                    reader.GetDouble(8),
                                                                    reader.GetDouble(9),
                                                                    reader.GetDateTime(11),
                                                                    reader.GetString(10));

                    PurchaseOrderList.Add(purchaseOrder);
                }

                return PurchaseOrderList;
            }
        }
    }

    public override string ToString()
    {
        return "Order #" + this.PurchaseOrders_Id + " Status: " + this.Status;
	}

}

